{"name":"ti-mocha","tagline":"Simple and reliable support for mocha testing with Appcelerator's Titanium SDK","body":"## Table of Contents\r\n\r\n* <a href=\"#installation\">Installation</a>\r\n* <a href=\"#basic-usage\">Basic Usage</a>\r\n* <a href=\"#reporters\">Reporters</a>\r\n* <a href=\"#using-shouldjs-with-ti-mocha\">Using should.js with ti-mocha</a>\r\n* <a href=\"#titanium--mocha--should-example\">Titanium + mocha + should example</a>\r\n* <a href=\"#tips\">Tips</a>\r\n* <a href=\"#caveats\">Caveats</a>\r\n* <a href=\"#links\">Links</a>\r\n\r\n## Installation\r\n\r\n#### Easy Way\r\n\r\n```\r\ncd /path/to/Titanium/project && npm install ti-mocha\r\n```\r\n\r\nIf executed in your project's root folder, this will put ti-mocha.js in `Resources` for traditional Titanium apps, or `app/lib` for Alloy apps.\r\n\r\n#### Less Easy Way\r\n\r\n1. Download [ti-mocha.js](https://raw.github.com/tonylukasavage/ti-mocha/master/ti-mocha.js).\r\n2. Copy `ti-mocha.js` into your project's `Resources` folder (or `app/lib` if you're using alloy).\r\n\r\n## Basic Usage\r\n\r\n```javascript\r\n// creates the \"mocha\" global necessary to run a test suite anywhere in your app\r\nrequire('ti-mocha');\r\n\r\n// create the test suite\r\ndescribe('ti-mocha', function() {\r\n\r\n\tdescribe('suite 1', function() {\r\n\r\n\t\tit('shows passing tests (fast)', function(){});\r\n\r\n\t\tit('shows passing tests (slow)', function(done){\r\n\t\t\tsetTimeout(done, 1500);\r\n\t\t});\r\n\r\n\t});\r\n\r\n\tdescribe('suite 2', function() {\r\n\r\n\t\tit('shows pending tests');\r\n\r\n\t\tit('fails a test', function() {\r\n\t\t\tthrow new Error('this shoud fail');\r\n\t\t});\r\n\r\n\t});\r\n\r\n});\r\n\r\n// run the tests\r\nmocha.run();\r\n```\r\n\r\n## Reporters\r\n\r\n* **ti-spec** - Titanium-compatible version of the original mocha [spec](http://visionmedia.github.io/mocha/#reporters) reporter\r\n* **ti-spec-studio** - Same as ti-spec, but this one is optimized for use in Titanium Studio\r\n\r\nThe **ti-spec** reporter is chosen by default. To switch to a different reporter, use mocha's `setup()` function before run your test suites.\r\n\r\n```javascript\r\nmocha.setup({ reporter: 'ti-spec-studio' });\r\n```\r\n\r\n#### Note for reporter developers\r\n\r\nGiving your reporter the suffix **\"-studio\"** will automatically modify ti-mocha's underlying `console.log()` implementation to exclude ANSI code sequences (covered in <a href=\"#caveats\">Caveats</a>). This helps to automatically optimize your test output for the Titanium Studio console. \r\n\r\n## Using should.js with ti-mocha\r\n\r\nWhile mocha doesn't care what you use as your assertion library, it works particularly well with [should.js](https://github.com/visionmedia/should.js), not coincidentally due to them having the same [author](https://github.com/visionmedia). To install should.js:\r\n\r\n1. Download [should.js](https://raw.github.com/visionmedia/should.js/master/should.js).\r\n2. Copy `should.js` into your project's `Resources` folder.\r\n\r\nFor full documentation on what should.js can do for your tests, check out the [documentation](https://github.com/visionmedia/should.js).\r\n\r\n## Titanium + mocha + should example\r\n\r\n#### app.js\r\n```javascript\r\nrequire('ti-mocha');\r\n\r\n// create a basic UI\r\nvar win = Ti.UI.createWindow({\r\n\tbackgroundColor: '#fff',\r\n\tfullscreen: false,\r\n\texitOnClose: true,\r\n\tid: 'myWindow'\r\n});\r\nvar view = Ti.UI.createView({\r\n\theight: Ti.UI.FILL,\r\n\twidth: Ti.UI.FILL,\r\n\tbackgroundColor: '#a00',\r\n\tid: 'myView'\r\n});\r\nwin.add(view);\r\n\r\n// run tests after window opens to ensure UI is initialized\r\nwin.addEventListener('open', function() {\r\n\trequire('test/app_test')(win, view);\r\n});\r\n\r\n// show the UI\r\nwin.open();\r\n```\r\n\r\n#### test/app_test.js\r\n```javascript\r\nvar should = require('should');\r\n\r\nmodule.exports = function(win, view) {\r\n\r\n\tdescribe('app.js', function() {\r\n\r\n\t\tdescribe('#myWindow', function() {\r\n\r\n\t\t\tit('exists', function() {\r\n\t\t\t\tshould.exist(win);\r\n\t\t\t\twin.id.should.equal('myWindow');\r\n\t\t\t});\r\n\r\n\t\t\tit('has Ti.UI.Window functions', function() {\r\n\t\t\t\tshould(win.open).be.a.Function;\r\n\t\t\t\tshould(win.close).be.a.Function;\r\n\r\n\t\t\t\tif (Ti.Platform.name === 'iPhone OS') {\r\n\t\t\t\t\tshould(win.hideTabBar).be.a.Function;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tit('has dimensions equal to the device', function() {\r\n\t\t\t\twin.size.height.should.equal(Ti.Platform.displayCaps.platformHeight);\r\n\t\t\t\twin.size.width.should.equal(Ti.Platform.displayCaps.platformWidth);\r\n\t\t\t});\r\n\r\n\t\t});\r\n\r\n\t\tdescribe('#myView', function() {\r\n\r\n\t\t\tit('exists', function(){\r\n\t\t\t\tshould.exist(view);\r\n\t\t\t\tview.id.should.equal('myView');\r\n\t\t\t});\r\n\r\n\t\t\tit('has Ti.UI.View functions', function() {\r\n\t\t\t\tshould(view.add).be.a.Function;\r\n\t\t\t});\r\n\r\n\t\t\tit('is a child of window', function() {\r\n\t\t\t\twin.children.length.should.equal(1);\r\n\t\t\t\tshould.exist(win.children[0]);\r\n\t\t\t\twin.children[0].id.should.equal('myView');\r\n\t\t\t});\r\n\r\n\t\t\tit('view has same dimensions as window', function(){\r\n\t\t\t\tview.size.height.should.equal(win.size.height);\r\n\t\t\t\tview.size.width.should.equal(win.size.width);\r\n\t\t\t});\r\n\r\n\t\t});\r\n\r\n\t});\r\n\r\n\t// run the tests\r\n\tmocha.run();\r\n};\r\n```\r\n\r\n#### output\r\n\r\n![example output](http://f.cl.ly/items/0c04320C3M1j2w2N1O1X/Screen%20Shot%202014-01-01%20at%2012.05.05%20PM.png)\r\n\r\n## Tips\r\n\r\n* Set your log level to `info` to get the best looking test results.\r\n* [.jshintrc](https://gist.github.com/tonylukasavage/8208574) for Titanium + mocha + should\r\n* If you're going to test Titanium UI state (like size and position), be sure to wait until the UI is ready. The easiest way to do this in most cases is to wait for the containing Ti.UI.Window to be open.\r\n\r\n```javascript\r\nvar win = Ti.UI.createWindow();\r\n\r\n// assemble the rest of \"win\" UI\r\n\r\nwin.addEventListener('open', function() {\r\n\t// run tests against \"win\" or its children\r\n});\r\nwin.open();\r\n```\r\n\r\n## Caveats\r\n\r\nThese caveats include tips for usage, as well as for development of your own Titanium-compatible reporters.\r\n\r\n#### Titanium proxies don't play well with should.js\r\n\r\nshould.js works by extending `Object.prototype` with the `should` object. While this works for all pure Javascript objects and most Titanium proxy properties, it does not update the proxies themselves, or their functions. When attempting to use `should` directly on Titanium proxies or their functions, you must wrap the proxy or function in a `should` call to avoid a runtime `undefined` error.\r\n\r\n```javascript\r\nvar should = require('should');\r\n\r\nvar win = Ti.UI.createWindow();\r\nwin.open.should.be.a.Function;  // will throw a runtime error\r\nshould(win.open).be.a.Function; // will work as expected\r\n```\r\n\r\n#### Ti.API calls and Studio Console don't like ANSI codes\r\n\r\nMuch of the reporters in mocha, including `ti-spec` which is optimized for the terminal, make use of [ANSI codes](http://en.wikipedia.org/wiki/ANSI_escape_code) for the test reporting output. These are integral to coloring, as well as controlling the cursor in mocha's reporters. Unfortunately, [Titanium Studio's console does not handle ANSI codes](https://jira.appcelerator.org/browse/TISTUD-5979), either ignoring them or printing them as literals. On top of this, the Ti.API calls will often mangle commonly used ANSI characters, like **✓** or **✖**. For this reason, when constructing your own reporters, it's wise to use standard characters or test heavily for compatibility before using any ANSI codes. \r\n\r\n#### Ti.API calls trim leading whitespace\r\n\r\nFor example, this:\r\n\r\n```javascript\r\nTi.API.info('    this should have 4 leading spaces');\r\n```\r\n\r\nwill print as this (notice the lack of leading spaces):\r\n\r\n```javascript\r\nthis should have 4 leading spaces\r\n```\r\n\r\nIn order to workaround this, we can take advantage of the previously mentioned caveat. If you wrap your whitespace in an ignored ANSI code, the whitespace will be preserved. So the above code would print with the 4 leading spaces if you modified it to look like this:\r\n\r\n```javascript\r\n// color() helper from Base reporter class\r\nvar color = require('./base').color;\r\n\r\nTi.API.info(color('suite', '    ') + 'this should have 4 leading spaces');\r\n\r\n// or you can simply include the whitespace in the coloring of the whole line\r\n\r\nTi.API.info(color('suite', '    this should have 4 leading spaces'));\r\n```\r\n\r\n## Links\r\n\r\n* [mocha website and docs](http://visionmedia.github.io/mocha/)\r\n* [should.js website and docs](https://github.com/visionmedia/should.js)\r\n* [@tonylukasavage](https://twitter.com/tonylukasavage)\r\n* [Appcelerator website](http://www.appcelerator.com/)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}